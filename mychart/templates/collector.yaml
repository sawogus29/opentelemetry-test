apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: demo
spec:
  mode: daemonset
  #----------- filelog ----------------#
  volumeMounts:
  - name: var-log-pods
    mountPath: /var/log/pods
    readOnly: true
  - name: var-log-containers
    mountPath: /var/log/containers
    readOnly: true
  - name: var-lib-docker-containers
    mountPath: /var/lib/docker/containers
    readOnly: true
  volumes:
  - name: var-log-pods
    hostPath: 
      path: /var/log/pods
      type: Directory
  - name: var-log-containers
    hostPath: 
      path: /var/log/containers
      type: Directory
  - name: var-lib-docker-containers
    hostPath:
      path: /var/lib/docker/containers
      type: Directory
  #-------------------------------------#
  config: |
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      #------------- filelog ---------------------#
      filelog:
        include:
          - /var/log/pods/*/auth/*.log
        exclude:
          # Exclude logs from all containers named demo-collector
          - /var/log/pods/*/demo-collector/*.log
        start_at: beginning
        include_file_path: true
        include_file_name: false
        operators:
          - type: container
            format: docker
            add_metadata_from_filepath: true
          - type: recombine
            id: multiline-recombine
            combine_field: body
            is_first_entry: 'body matches "(^\\{\\n$)|(^\\[\\d{4}-\\d{2}-\\d{2}.*\\].*)"'
            combine_with: ""
            source_identifier: attributes["log.file.path"]
            max_log_size: 256000  # Adjust based on expected max log size
          - type: router
            routes:
              - output: otel-parser
                expr: 'body matches "^\\{\\n.*"'
            default: noop
          #----- attributes, body, resource ---------#
          - type: json_parser
            id: otel-parser
            parse_from: body
            # parse_ints: true
          - type: move
            from: attributes.body
            to: body
          # - type: json_parser                 # Parser error
          #   id: resource-parser
          #   parse_from: attributes.resource
          #   parse_to: resource
          #----- flatten attribute ---------#
          - type: flatten
            field: attributes.attributes
          - type: move
            from: attributes.otelTraceID
            to: attributes.trace_id
          - type: move
            from: attributes.otelSpanID
            to: attributes.span_id
          - type: move
            from: attributes.otelServiceName
            to: attributes.service_name
          - type: remove
            field: attributes.resource
          #---- parse trace and severity ------#
          - type: trace_parser
            trace_id:
              parse_from: attributes.trace_id
            span_id:
              parse_from: attributes.span_id
            # trace_flags:
            #   parse_from: attributes.trace_flags
          - type: severity_parser
            parse_from: attributes.severity_text
          # - type: move
          #   from: attributes.attributes
          #   to: attributes
          - type: noop
            id: noop

      #--------------------------------------------#

    processors:
      # memory_limiter:
      #   check_interval: 1s
      #   limit_percentage: 75
      #   spike_limit_percentage: 15
      # batch:
      #   send_batch_size: 10000
      #   timeout: 10s

    exporters:
      debug:
        verbosity: detailed
      otlp:
        endpoint: jaeger:4317
        tls:
          insecure: true
      otlp/tempo:
        endpoint: tempo.monitoring.svc.cluster.local:4317
        tls:
          insecure: true
      otlphttp:
        endpoint: http://loki-gateway.monitoring.svc.cluster.local/otlp
      otlphttp/mimir:
        endpoint: http://mimir.monitoring.svc.cluster.local:9009/otlp
      # prometheusremotewrite:
      #   endpoint: http://mimir.monitoring.svc.cluster.local/api/v1/push
      # prometheus:
      #   endpoint: "0.0.0.0:8889"
      #   send_timestamps: true
      #   namespace: otel-test
      #   const_labels:
      #     via: collector
      #   enable_open_metrics: true
      #   # resource_to_telemetry_conversion:
      #   #   enabled: true

    service:
      # telemetry:
        # traces:
        #   level: "debug"
        # logs:
        #   level: "debug"
      pipelines:
        traces:
          receivers: [otlp]
          # processors: []
          exporters: [otlp, otlp/tempo]
        # metrics:
        #   receivers: [otlp]
        #   processors: [memory_limiter, batch]
        #   exporters: [otlphttp/mimir, prometheus, debug]
        logs:
          # receivers: [otlp]
          # processors: []
          # exporters: [otlphttp]
          receivers: [filelog]
          exporters: [debug]